*** LINUX SERVER SETUP USING A NEWLY CREATED DIGITAL OCEAN LAMP SERVER ***

1. ssh root@ipaddressOfLinuxServer (follow instructions to change password)

2. Set up mysql (password available from welcome message)

cat /root/.digitalocean_password

mysql -u root -p

CREATE USER 'appuser'@'localhost' IDENTIFIED BY 'Pa$$w0rd';
GRANT ALL PRIVILEGES ON *.* TO 'appuser'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;

3.  Install Redis on the server:

sudo apt update
sudo apt install redis-server
sudo nano /etc/redis/redis.conf

Inside the config look for the line:

#       They do not enable continuous liveness pings back to your supervisor.
supervised no

Change this to:

supervised systemd

Ctrl + X then yes to save changes in the nano editor

Check the status:

sudo systemctl status redis

Check we receive Pong back via the redis cli:

redis-cli
ping

quit out of the redis cli

4.  Install the dotnet runtime (follow instructions from here https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/runtime-current)

5.  Configure Apache

a2enmod proxy proxy_http proxy_html rewrite

systemctl restart apache2

6.  Configure the virtual host

sudo nano /etc/apache2/sites-available/skinet.conf

<VirtualHost *:80>
ProxyPreserveHost On
ProxyPass / http://127.0.0.1:5000/
ProxyPassReverse / http://127.0.0.1:5000/

ErrorLog /var/log/apache2/skinet-error.log
CustomLog /var/log/apache2/skinet-access.log common

</VirtualHost>

6. Enable the site 

a2ensite skinet

7.  Disable the default Apache site:

a2dissite 000-default

Then restart apache

systemctl reload apache2

8. Update the config in appsettings:

Update the endpoints for the webhooks to point to the IP address of the new server https://LinuxIPAddress/api/payments/webhook

Copy the Webhook secret to the appsettings.json file

9.  Add the deploy.reloaded extension to VS Code

10.  Add a settings.json file to the .vscode folder and add the following:

{
    "deploy.reloaded": {
        "packages": [
            {
                "name": "Version 1.0.0",
                "description": "Package version 1.0.0",

                "files": [
                    "publish/**"
                ]
            }
        ],

        "targets": [
            {
                "type": "sftp",
                "name": "Linux",
                "description": "SFTP folder",

                "host": "IP Address", "port": 22,
                "user": "root", "password": "Your Linux password",

                "dir": "/var/skinet",
                "mappings": {
                    "publish/**": "/"
                }
            }
        ]
    }
}

11.  Publish the dotnet application locally from the solution folder:

Update the appsettings.json file and change the ApiUrl to match your server IP address e.g:

"ApiUrl": "http://128.199.203.224/Content/",

dotnet publish -c Release -o publish Skinet.sln

This will create a new folder called publish

12.  Deploy the package using deploy reloaded

=== Back to the Linux server ====

13.  Restart the journalctl service as this has been not working on fresh installs and is very useful to get information about the service:

systemctl restart systemd-journald

14.  Set up the service that will run the kestrel web server

sudo nano /etc/systemd/system/skinet-web.service

Paste in the folllowing:

[Unit]
Description=Kestrel service running on Ubuntu 18.04
[Service]
WorkingDirectory=/var/skinet
ExecStart=/usr/bin/dotnet /var/skinet/API.dll
Restart=always
RestartSec=10
SyslogIdentifier=skinet
User=www-data
Environment=ASPNETCORE_ENVIRONMENT=Production
Environment='Token__Key=CHANGE ME TO SOMETHING SECURE'
Environment='Token__Issuer=https://yoursitegoeshere'
[Install]
WantedBy=multi-user.target

Then run:

sudo systemctl enable skinet-web.service
sudo systemctl start skinet-web.service

15.  Ensure the server is running:

netstat -ntpl

16.  Check the journal logs:

journalctl -u skinet-web.service
journalctl -u skinet-web.service | tail -n 300
journalctl -u skinet-web.service --since "5 min ago"


===== 
certificate
=====

Demo the Program.cs so URL is different
Demo the config in Apache:

sudo nano /etc/apache2/sites-available/skinet.conf
sudo nano /etc/systemd/system/skinet-web.service

sudo systemctl restart skinet-web.service

redis-cli --scan --pattern '*product*' | xargs -L 100 redis-cli del



UaRgaYgSt2Ae8NS9VCPtDw
